#
# This is the main GENIE project Makefile.
# Each package has its own Makefile which is invoked by this one.
# Machine specific flags and locations are read from 'make/Make.include'.
# Configuration options are read from 'make/Make.config' generated by the 'configure' script.
#
# Author: Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
#

SHELL = /bin/sh
NAME = all
MAKEFILE = Makefile

# Include machine specific flags and locations (inc. files & libs)
#
include $(GENIE)/src/make/Make.include

INSTALL_TARGETS = check-previous-installation \
		   make-install-dirs \
		   copy-install-files

# define targets

CORE := Algorithm Messenger Registry Conventions
UTILS := Numerical CrossSections PDG Utils

OPTIONAL_MODULES := NucleonDecay ReWeight VLE VHE FluxDrivers Geo MuELoss

# VLD_TOOLS := validation/EvScan validation/MCx validation/NuXSec validation/StructFunc validation/Hadronization validation/Intranuke validation/Merenyi validation/eA
VLD_TOOLS := validation/EvScan validation/MCx validation/NuXSec validation/StructFunc validation/Hadronization validation/Intranuke validation/Merenyi validation/eA validation/MINERvA/Q2_QE_CC

EVGEN_MODULES := BaryonResonance Base EVGCore EVGDrivers Interaction GHEP Ntuple

MEDIUM_ENERGY_MODULES := 	BodekYang Charm Coherent Decay Diffractive DIS Elastic ElFF EVGModules Fragmentation GiBUU HadronTransport LlewellynSmith NuE Nuclear PartonModel PDF QEL ReinSeghal RES

TEST_MEDIUM_ENERGY_MODULES := MEC NuGamma

SUPPORT_APP_MODULES := support/t2k/EvGen support/numi/EvGen support/atmo/EvGen support/atmo/UpMuFluxGen support/ndcy/EvGen support/rwght support/masterclass

APP_MODULES := stdapp test

ALL_MODULES :=  $(OPTIONAL_MODULES) $(VLD_TOOLS) $(EVGEN_MODULES) $(MEDIUM_ENERGY_MODULES) $(SUPPORT_APP_MODULES) $(APP_MODULES) $(TEST_MEDIUM_ENERGY_MODULES) $(CORE) $(UTILS)

# Modules which we want to call 'make install' on
INSTALL_MODULES := $(CORE) $(UTILS) $(OPTIONAL_MODULES) $(EVGEN_MODULES) $(MEDIUM_ENERGY_MODULES) $(TEST_MEDIUM_ENERGY_MODULES)

# For each optional module, there's a variable set in Make.config that
# is "YES" if the module should be compiled, and blank if it should
# not. For each optional module we define a variable
# <MODULENAME>_OPTVAR whose value is the name of the variable that
# defines whether it should be built or not. It would be better to
# change the variable names in Make.config, but this way is more
# self-contained (don't have to change the configure script)
NucleonDecay_OPTVAR := GOPT_ENABLE_NUCLEON_DECAY
ReWeight_OPTVAR := GOPT_ENABLE_RWGHT
VLE_OPTVAR := GOPT_ENABLE_VLE_EXTENSION
VHE_OPTVAR := GOPT_ENABLE_VHE_EXTENSION
FluxDrivers_OPTVAR := GOPT_ENABLE_FLUX_DRIVERS
Geo_OPTVAR := GOPT_ENABLE_GEOM_DRIVERS
MuELoss_OPTVAR := GOPT_ENABLE_MUELOSS

validation/EvScan_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/MCx_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/NuXSec_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/StructFunc_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/Hadronization_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/Intranuke_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/Merenyi_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS
validation/eA_OPTVAR := GOPT_ENABLE_VALIDATION_TOOLS

test_OPTVAR := GOPT_ENABLE_TEST
support/t2k/EvGen_OPTVAR := GOPT_ENABLE_T2K
support/numi/EvGen_OPTVAR := GOPT_ENABLE_NUMI

support/atmo/EvGen_OPTVAR := GOPT_ENABLE_ATMO
support/atmo/UpMuFluxGen_OPTVAR := GOPT_ENABLE_ATMO
support/ndcy/EvGen_OPTVAR := GOPT_ENABLE_NUCLEON_DECAY
support/rwght_OPTVAR := GOPT_ENABLE_RWGHT
support/masterclass_OPTVAR := GOPT_ENABLE_MASTERCLASS

.PHONY: all $(ALL_MODULES)

all:     $(ALL_MODULES)

# This is subtle and tricky. OPTVAR will hold the name of the variable
# that defines whether we build the module defined by $@ (eg
# GOPT_ENABLE_MASTERCLASS). OPTVAL will hold the *value* of that
# variable (eg YES). Both have to be set with "=", not ":=", because
# we want them expanded inside the target where $@ is set
OPTVAR = $($@_OPTVAR)
OPTVAL = $($($@_OPTVAR))

# A little function that returns "buildit" if the module named by $@
# should be built, and an empty string if it should not. The module
# should be built if there's no variable called <MODULENAME>_OPTVAR
# (ie, if $(OPTVAR) is null), or if there is such a variable, and its value is YES.
#
# The return value convention is just for the benefit of the $(if ...)
# function that we'll use later, which considers non-empty strings to
# be true and empty strings to be false
should_build = $(if $(OPTVAR),$(if $(findstring YES,$(OPTVAL)),buildit), buildit)

# The rule to build a module: if should_build says we should build it, just call $(MAKE) in its directory
$(ALL_MODULES): bin lib src/Conventions/GVersion.h src/Conventions/GBuild.h install-scripts
	$(if $(call should_build), \
	@echo "Building $@" ;\
	$(MAKE) -C src/$@,\
	@echo "Skipping $@")

# Dependencies between modules
$(OPTIONAL_MODULES) $(MEDIUM_ENERGY_MODULES) $(TEST_MEDIUM_ENERGY_MODULES): $(EVGEN_MODULES)

$(EVGEN_MODULES): $(CORE) $(UTILS)

$(VLD_TOOLS) $(SUPPORT_APP_MODULES) $(APP_MODULES): $(OPTIONAL_MODULES) $(MEDIUM_ENERGY_MODULES) $(TEST_MEDIUM_ENERGY_MODULES)


install: $(INSTALL_TARGETS)

bin lib:
	mkdir -p ${GENIE}/$@; chmod 755 ${GENIE}/$@

src/Conventions/GVersion.h:
	perl ${GENIE}/src/scripts/setup/genie-write-gversion

src/Conventions/GBuild.h:
	perl ${GENIE}/src/scripts/setup/genie-write-gbuild

# This target is used for generating the doxygen documentation
# during the genie build.
# It only does so if the option has been enabled explicitly by the user.
doxygen-doc:
ifeq ($(strip $(GOPT_ENABLE_DOXYGEN_DOC)),YES)
	@echo " "
	@echo "** Building doxygen documentation..."
	$(MAKE) -C src/scripts doxygen
else
endif

# Use this target  to generate the doxygen documentation at any
# point, independently of your local genie build.
doxygen:
	@echo " "
	@echo "** Building doxygen documentation..."
	$(MAKE) -C src/scripts doxygen

install-scripts:
	@echo " "
	@echo "** Installing scripts..."
	$(MAKE) -C src/scripts install

save-build-env: FORCE
	@echo " "
	@echo "** Taking a snapshot of the build environment..."
	perl ${GENIE}/src/scripts/setup/genie-build-env-snapshot

check-previous-installation: FORCE
	@echo " "
	@echo "** Testing for existing GENIE installation at specified installation location..."
ifeq ($(strip $(GENIE_PREVIOUS_INSTALLATION)),YES)
	$(error Previous installation exists at your specified installation path: $(GENIE_INSTALLATION_PATH). Try 'gmake distclean' first)
endif

make-install-dirs: FORCE
	@echo " "
	@echo "** Creating directory structure for GENIE installation..."
	[ -d ${GENIE_INSTALLATION_PATH} ] || mkdir ${GENIE_INSTALLATION_PATH}
	cd ${GENIE_INSTALLATION_PATH}
	[ -d ${GENIE_BIN_INSTALLATION_PATH}     ] || mkdir ${GENIE_BIN_INSTALLATION_PATH}
	[ -d ${GENIE_LIB_INSTALLATION_PATH}     ] || mkdir ${GENIE_LIB_INSTALLATION_PATH}
	[ -d ${GENIE_INCBASE_INSTALLATION_PATH} ] || mkdir ${GENIE_INCBASE_INSTALLATION_PATH}
	mkdir ${GENIE_INC_INSTALLATION_PATH}
	$(foreach mod, $(INSTALL_MODULES), mkdir ${GENIE_INC_INSTALLATION_PATH}/$(mod) ; )

copy-install-files: FORCE
	@echo " "
	@echo "** Copying libraries/binaries/headers to installation location..."
	cp ${GENIE_BIN_PATH}/* ${GENIE_BIN_INSTALLATION_PATH};\
	$(foreach mod, $(INSTALL_MODULES), $(MAKE) -C src/$(mod) install ; )

.PHONY: purge

purge: FORCE
	@echo " "
	@echo "** Purging..."
	$(foreach mod, $(ALL_MODULES), make -C src/$(mod) purge ;)
	cd ${GENIE}

.PHONY: clean clean-files clean-dir clean-etc

clean: clean-files clean-dir clean-etc

clean-files:
	@echo " "
	@echo "** Cleaning..."
	$(foreach mod, $(ALL_MODULES), make -C src/$(mod) clean ;)
	cd $(GENIE);\
    [  -d ./bin ] && rm -f ./bin/*;\
    [  -d ./lib ] && rm -f ./lib/*;\
	cd $(GENIE)

clean-dir: clean-files
	@echo "Deleting GENIE lib and bin directories...";\
	cd $(GENIE);\
	[  -d ./bin ] && rmdir ./bin;\
	[  -d ./lib ] && rmdir ./lib

clean-etc:
	cd $(GENIE); \
	rm -f ./*log; \
	cd ${GENIE}

distclean: FORCE
	@echo " "
	@echo "** Cleaning GENIE installation... "
	[ ! -d ${GENIE_INSTALLATION_PATH}/include/GENIE ] || rm -rf ${GENIE_INSTALLATION_PATH}/include/GENIE/
	$(foreach mod, $(ALL_MODULES), make -C src/$(mod) distclean ;)

FORCE:

# DO NOT DELETE
